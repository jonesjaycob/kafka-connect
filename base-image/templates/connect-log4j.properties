# ANALYTICS LOG CONFIGURATION
# root log level (if an override to a class or package is not specified,
# it will now log at this level).
log4j.rootLogger=${KAFKA_CONNECT_LOG4J_ROOT_LOGLEVEL}, stdout
log4j.logger.org.reflections=ERROR

# Append logs to console. If the customer is using different appenders,
# update the following lines accordingly. The "%X{connector.context}"
# fragment instructs Connect to include connector- and task-specific information
# on every log message and is now recommended.log4j.appender.stdout=org.apache.log4j.ConsoleAppender

# LOG FORMATTING
log4j.appender.kafkaConnectRestAppender.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout=com.github.szhem.logstash.log4j.LogStashJsonLayout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.encoding=UTF-8
log4j.appender.stdout.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.stdout.layout.ConversionPattern={ \
    "domain": "ANALYTICS", \
    "timestamp":"%d{yyyy-MM-dd'T'HH:mm:ss.SSS}", \
    "level":"%p", \
    "message": "%X{connector.context}%m", \
    "data": { \
        "category": "%c", \
        "thread": "%t", \
        "file": "%F", \
        "line": "%L"}  \
        }%n

